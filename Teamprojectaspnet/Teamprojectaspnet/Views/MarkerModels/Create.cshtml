@model Teamprojectaspnet.Models.MarkerModel

@{
    ViewBag.Title = "Create";
}
<h2>Create</h2>

<div class="row">
    <div class="col-md-6">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal table-bordered">
                <h4>MarkerModel</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control",id = "MName" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", id = "MDescr" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Contacts, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10" id="DivSelectContacts">
                        <select id="SelectContacts" style="float:left" class="form-control" name="@Html.NameFor(m => m.Contacts)">
                            @for (int i = 0; i < ViewBag.Contacts.Length; i++)
            {
                <option>@ViewBag.Contacts[i]</option>
}
                        </select>
                        @*@Html.EditorFor(model => model.TypeofMarker, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.TypeofMarker, "", new { @class = "text-danger" })



                        <button id="BTNWriteContacts" style="margin-left:1%" class="btn btn-primary">Write</button>

                    </div>

                    <div class="col-md-10" style="display:none;float:left" id="DivWriteContacts">

                        @Html.EditorFor(model => model.TypeofMarker, new { htmlAttributes = new { @class = "form-control", @style = "float:left" } })

                        <button id="BTNSelectContacts" style="margin-left:1%" class="btn btn-primary">Select</button>

                    </div>



                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Lat, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(x => x.Lat, new {@readonly = true, id = "MLat",  @class = "form-control" })
                       
                        @*@Html.EditorFor(model => model.Lat, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Lat, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Lng, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(x => x.Lng, new { @readonly = true, id = "MLng", @class = "form-control" })
                        @*@Html.EditorFor(model => model.Lng, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Lng, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.TypeofMarker, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select id="SelectType" class="form-control" name="@Html.NameFor(m => m.TypeofMarker)">
                            @for (int i = 0; i < ViewBag.Types.Length; i++)
                            {
                                <option>@ViewBag.Types[i]</option>
                            }
                        </select>
                        @*@Html.EditorFor(model => model.TypeofMarker, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.TypeofMarker, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.MarkerAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        <select id="SelectAddress" class="form-control" name="@Html.NameFor(m => m.MarkerAddress)">
                            @for (int i = 0; i < ViewBag.Addresses.Length; i++)
                            {
                                <option>@ViewBag.Addresses[i]</option>
                            }
                        </select>
                        @*@Html.EditorFor(model => model.MarkerAddress, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.MarkerAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.MarkerLogin, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select id="SelectLogins" class="form-control" name="@Html.NameFor(m => m.MarkerLogin)">
                            @for (int i = 0; i < ViewBag.Logins.Length; i++)
                            {
                                <option>@ViewBag.Logins[i]</option>
                            }
                        </select>
                        @*@Html.EditorFor(model => model.MarkerLogin, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.MarkerLogin, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input id="BTNCreateNewMarker" type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-md-6">
        <div id="canvas" style="height: 450px; width:450px;">
        </div>
    </div>
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<hr>

<input type="text" id="TB" class="form-control">

<button id="BTN" class="btn btn-success">Crrrr</button>



@section Scripts {
    <script type="text/javascript" src = "http://maps.google.com/maps/api/js?key=AIzaSyA0xGLIexwOJlTBM5xhQjP-5jhNxRM662k&sensor=true"></script>
    <script type="text/javascript">
        var map;
        var markers = [];
        $(document).ready(function () {
            SetMap();

           // $("#BTN").on("click", AddMarker);

            $("#BTNCreateNewMarker").on("click", AddMarker);

            $("#BTNWriteContacts").on("click", WriteContact);

            $("#BTNSelectContacts").on("click",SelectContact);
        });

        function SelectContact()
        {
            var x = document.getElementById("DivWriteContacts");

            x.style.display = "none";

            var t = document.getElementById("DivSelectContacts");

            t.style.display = "block";
        }

        function WriteContact()
        {
            var x = document.getElementById("DivWriteContacts");

            x.style.display = "block";

            var t = document.getElementById("DivSelectContacts");

            t.style.display = "none";
        }

        function AddMarker()
        {
            var arrData = {};

            var name = document.getElementById("MName");

            var descr = document.getElementById("MDescr");

            var selCont = document.getElementById("SelectContacts");

            var lat = document.getElementById("MLat");

            var lng = document.getElementById("MLng");

            var selType = document.getElementById("SelectType");

            var selAddress = document.getElementById("SelectAddress");

            var selLogin = document.getElementById("SelectLogins");

            arr["Name"] = name.value;

            arr["Surname"] = descr.value;

            

            //e.value = "YYYEEESSS";

           // var t = document.getElementById("SelectId");
           //
           // e.value = t.value;

            alert(arr["Name"]);

        }

        function SetMap() {
            var Rivne = new google.maps.LatLng(50.6231, 26.2274);
            var mapOptions = {
                zoom: 13,
                center: Rivne,
                mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
            };
            map = new google.maps.Map(document.getElementById("canvas"), mapOptions);
            map.addListener('click', function (e) {
                placeMarkerAndPanTo(e.latLng, map);
            });
        }
        function placeMarkerAndPanTo(latLng, map) {
            clearMarkers();
            var marker = new google.maps.Marker({
                position: latLng,
                map: map
            });
            map.panTo(latLng);
            markers.push(marker);
            document.getElementById("Lng").value = latLng.lng();
            document.getElementById("Lat").value = latLng.lat();
        }
        function clearMarkers() {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
            }
            markers = [];
        }
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}
